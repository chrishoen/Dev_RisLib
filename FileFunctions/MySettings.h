#pragma once

/*==============================================================================
Settings json file class.
==============================================================================*/

//******************************************************************************
//******************************************************************************
//******************************************************************************

#include <string>
#include "json.h"

//******************************************************************************
//******************************************************************************
//******************************************************************************
// This class contains a set of member variables that are stored in a
// json file. The file is intended to have a single writer and multiple
// readers.

class MySettings
{
public:
   //***************************************************************************
   //***************************************************************************
   //***************************************************************************
   // Constants.

   static const int cMaxStringSize = 200;

   //***************************************************************************
   //***************************************************************************
   //***************************************************************************
   // Members.

   // Json file path.
   char mFilePath[cMaxStringSize];

   //***************************************************************************
   //***************************************************************************
   //***************************************************************************
   // Members. These are read from/written to the json file.

   // If true then the alarm is enabled.
   bool mAlarmEnable;

   // If true then the buzzer is enabled.
   bool mBuzzerEnable;

   // Uncalibrated Measurement input.
   float mRawInput;

   // Calibrated measurement input.
   float mInput;

   //***************************************************************************
   //***************************************************************************
   //***************************************************************************
   // Methods.

   // Constructor.
   MySettings();
   void reset();

   //***************************************************************************
   //***************************************************************************
   //***************************************************************************
   // Methods.

   // Read the member variables from the json file. Use file locks.
   // If the file doesn't exist then set the member variables to 
   // defaults and write the file so that it does exist. This will
   // create a file for the first time with defaults.
   void doRead();

   // Write the member variables to the json file. Use file locks.
   void doWrite();

   //***************************************************************************
   //***************************************************************************
   //***************************************************************************
   // Methods. Helpers.

   // Return a json value from the member variables.
   Json::Value getJsonValueFromMembers();

   // Set the member variables from a json value.
   void setMembersFromJsonValue(Json::Value aValue);

   // Print the member variables.
   void show();
};

//******************************************************************************
//******************************************************************************
//******************************************************************************
