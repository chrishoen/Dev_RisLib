#pragma once
/*==============================================================================
This file contains classes that encapsulate standard rtos multithreading
synchronization constructs. It supplies events, semaphores, and mutexes.
The purpose of the classes is to wrap the rtos api thread synchronization
calls.
==============================================================================*/

//******************************************************************************
//******************************************************************************
//******************************************************************************

//******************************************************************************
//******************************************************************************
//******************************************************************************

namespace Ris
{

//******************************************************************************
//******************************************************************************
//******************************************************************************
// This encapsulates a named semaphore.

class NamedSemaphore
{
public:

   //***************************************************************************
   //***************************************************************************
   //***************************************************************************
   // Members.

   // Specific implementation variables.
   class Specific;
   Specific* mSpecific;

   //***************************************************************************
   //***************************************************************************
   //***************************************************************************
   // Methods.

   // Constructor. Create the mutex.
   NamedSemaphore(const char* aName);

   // Constructor. default. Initialize the data structure.
   NamedSemaphore();
   virtual ~NamedSemaphore();

   // Create the mutex. Call this if using default constructor.
   void initialize(const char* aName);
   // Destructor. Delete the mutex.

   // Get from the semaphore.
   void get();

   // Put to the semaphore.
   void put();
};
  
//******************************************************************************
//******************************************************************************
//******************************************************************************
}//namespace


