#pragma once

/*==============================================================================
Thread abortable sleep object.
==============================================================================*/

//******************************************************************************
//******************************************************************************
//******************************************************************************

#include "risThreadsSynch.h"

namespace Ris
{

//******************************************************************************
//******************************************************************************
//******************************************************************************
// The class provides an abortable sleep mechanism.


class AbortableSleep
{
public:
   //***************************************************************************
   //***************************************************************************
   //***************************************************************************
   // Members.

   // If true then an abort was called.
   bool mAbortFlag;

   // Binary semaphore that provides the sleep.
   Threads::BinarySemaphore mSem;

public:
   //***************************************************************************
   //***************************************************************************
   //***************************************************************************
   // Methods.

   // Constructor.
   AbortableSleep();

   // Set the abort flag false and wait for the semaphore to timeout.
   void doSleep(int aTimeout);

   // Set the abort flag true and signal the event semaphore. This will
   // abort  the above sleep.
   void doAbort();
};

//******************************************************************************
//******************************************************************************
//******************************************************************************
}//namespace


