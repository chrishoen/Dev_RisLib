/*==============================================================================
Print utility
==============================================================================*/

//******************************************************************************
//******************************************************************************
//******************************************************************************

#include "stdafx.h"
#include <random>

#include "risSystemCalls.h"
#include "risFileFunctions.h"

//****************************************************************************
//****************************************************************************
//****************************************************************************

namespace Ris
{

//******************************************************************************
//******************************************************************************
//******************************************************************************
// Delete a file.

void deleteFile(const char* aFilePath)
{
   char* tString = new char[2000];
   sprintf(tString, "del %s", aFilePath);
   Ris::doSystemCommand(tString);
   delete[] tString;
}

//******************************************************************************
//******************************************************************************
//******************************************************************************
// Touch a file.

void touchFile(const char* aFilePath)
{
   char* tString = new char[2000];
   sprintf(tString, "touch %s", aFilePath);
   Ris::doSystemCommand(tString);
   delete[] tString;
}

//******************************************************************************
//******************************************************************************
//******************************************************************************
// chmod a file for 666.

void doFilePermissions666(const char* aFilePath)
{
}

// chmod a file for 666.
void doFilePermissions666(const std::string& aFilePath)
{
}

//****************************************************************************
//****************************************************************************
//****************************************************************************
// Open a lock file and lock it. Return a file descriptor to the
// opened lock file.

int doLockFile_OpenAndLockForRead(const char* aLockName)
{
   return 0;
}

int doLockFile_OpenAndLockForWrite(const char* aLockName)
{
   return 0;
}

//****************************************************************************
//****************************************************************************
//****************************************************************************
// Unlock on opened lock file and close it.

void doLockFile_UnlockAndClose(int aFileDesc)
{
}

//******************************************************************************
//******************************************************************************
//******************************************************************************
// Open a file and lock it. Return a file handle.

FILE* doOpenAndLockForRead(const char* aFilePath)
{
   FILE* tFile = fopen(aFilePath, "r");
   return tFile;
}

//******************************************************************************
//******************************************************************************
//******************************************************************************
// Open a file and lock it. Return a file handle.

FILE* doOpenAndLockForWrite(const char* aFilePath)
{
   FILE* tFile = fopen(aFilePath, "w");
   return tFile;
}

//******************************************************************************
//******************************************************************************
//******************************************************************************
// Open a file and lock it. Return a file handle.

FILE* doOpenAndLockForReadWrite(const char* aFilePath)
{
   FILE* tFile = fopen(aFilePath, "rw");
   return tFile;
}

//******************************************************************************
//******************************************************************************
//******************************************************************************
// Unlock an opened and locked file and close it.

void doUnlockAndClose(FILE* aFile)
{
   fclose(aFile);
}

//******************************************************************************
//******************************************************************************
//******************************************************************************
}//namespace
