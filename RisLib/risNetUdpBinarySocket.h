#pragma once

/*==============================================================================
UDP receive  binary socket.
UDP transmit binary socket.
==============================================================================*/

//******************************************************************************
//******************************************************************************
//******************************************************************************

#include "risThreadsSynch.h"
#include "risNetSettings.h"
#include "risSockets.h"

//******************************************************************************
//******************************************************************************
//******************************************************************************

namespace Ris
{
namespace Net
{

//******************************************************************************
//******************************************************************************
//******************************************************************************
//******************************************************************************
//******************************************************************************
//******************************************************************************
// Udp receive binary socket. This class encapsulates a udp socket that
// receives binary data.

class UdpRxBinarySocket : public Sockets::BaseUdpSocket
{
public:
   typedef Sockets::BaseUdpSocket BaseClass;

   //***************************************************************************
   //***************************************************************************
   //***************************************************************************
   // Constants.

   // Binary size.
   static const int cBinarySize = 2048;

   //***************************************************************************
   //***************************************************************************
   //***************************************************************************
   // Members.

   // Settings.
   Settings mSettings;

   // The recvfrom address is stored here.
   Sockets::SocketAddress mFromAddress;

   // Number of bytes received.
   int mRxLength;

   // True if the socket is valid.
   bool mValidFlag;

   // Metrics.
   int mRxCount;

   // Received binary buffer.
   char mRxBinary[cBinarySize];

   //***************************************************************************
   //***************************************************************************
   //***************************************************************************
   // Methods.

   // Constructor.
   UdpRxBinarySocket();

   // Initialize variables.
   void initialize(Settings& aSettings);

   // Configure the socket. This does socket and bind calls.
   void configure();

   //***************************************************************************
   //***************************************************************************
   //***************************************************************************
   // Methods.

   // Receive a binary into the allocated receive buffer.
   // It returns true if successful.
   // The recvfrom address is stored in mFromAddress.
   bool doRecvBinary ();
};

//******************************************************************************
//******************************************************************************
//******************************************************************************
//******************************************************************************
//******************************************************************************
//******************************************************************************
// Udp transmit message socket. This class encapsulates a udp socket that
// transmits a binary.

class UdpTxBinarySocket : public Sockets::BaseUdpSocket
{
public:
   typedef Sockets::BaseUdpSocket BaseClass;

   //***************************************************************************
   //***************************************************************************
   //***************************************************************************
   // Constants.

   // Binary size.
   static const int cBinarySize = 1000;

   //***************************************************************************
   //***************************************************************************
   //***************************************************************************
   // Members.

   // Settings.
   Settings mSettings;

   // The recvfrom address is stored here.
   Sockets::SocketAddress mFromAddress;

   // Number of bytes transmitted.
   int mTxLength;

   // True if the socket is valid.
   bool mValidFlag;

   // Metrics.
   int mTxCount;

   //***************************************************************************
   //***************************************************************************
   //***************************************************************************
   // Methods.

   // Constructor.
   UdpTxBinarySocket();

   // Initialize variables.
   void initialize(Settings& aSettings);

   // Configure the socket. This does socket and bind calls.
   void configure();

   //***************************************************************************
   //***************************************************************************
   //***************************************************************************
   // Methods.

   // Send a binary over the socket via a blocking send call.
   // It returns true if successful.
   // It is protected by the transmit mutex.
   bool doSendBinary(void* aBinary, size_t alength);
   bool doSendBinary(void* aBinary, int alength);
};

//******************************************************************************
//******************************************************************************
//******************************************************************************
}//namespace
}//namespace

