#pragma once

/*==============================================================================
Sleep functions.
==============================================================================*/

//******************************************************************************
//******************************************************************************
//******************************************************************************

#include <random>

//******************************************************************************
//******************************************************************************
//******************************************************************************

namespace Ris
{

//******************************************************************************
//******************************************************************************
//******************************************************************************
// Sleep functions.

// Sleep milliseconds.
void sleepMs(int aTimeMs);

// Sleep microseconds.
void sleepUs(int aTimeUs);

//******************************************************************************
//******************************************************************************
//******************************************************************************
// This class provides a function that sleeps for a random time. 

class  RandomSleepMs
{
public:

   //***************************************************************************
   //***************************************************************************
   //***************************************************************************
   // Members.

   // Timer interval range, microseconds. These provide the bounds for a
   // uniform random number generator that generates a random sleep interval.
   // The inheritor timer handler function gets called after the random sleep.
   // The bounds are calculated as
   // [SleepMeanMs*1000 - SleepRandomUs, SleepMeanMs*1000 + SleepRandomUs].
   int mSleepMeanMs;
   int mSleepRandomUs;

   //***************************************************************************
   //***************************************************************************
   //***************************************************************************
   // Members.

   // Timer interval range, microseconds. These provide the bounds for a
   // uniform random number generator that generates a random sleep interval.
   int mSleepUs1;
   int mSleepUs2;

   //***************************************************************************
   //***************************************************************************
   //***************************************************************************
   // Members.

   // Random numbers.
   std::mt19937 mRandomGenerator;
   std::uniform_int_distribution<> mRandomDistribution;

   //***************************************************************************
   //***************************************************************************
   //***************************************************************************
   // Methods.

   // Constructor.
   RandomSleepMs();
   void initializeMsMs(int aSleepMeanMs, int aSleepRandomMs);
   void initializeMsUs(int aSleepMeanMs, int aSleepRandomUs);

   //***************************************************************************
   //***************************************************************************
   //***************************************************************************
   // Methods.

   // Sleep for a time that is generated by a random number that has 
   // bounds SleepUs1..SleepUs2.
   void doSleep();
};

//******************************************************************************
//******************************************************************************
//******************************************************************************
}//namespace


