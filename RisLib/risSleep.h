#pragma once

/*==============================================================================
Sleep functions.
==============================================================================*/

//******************************************************************************
//******************************************************************************
//******************************************************************************

#include <random>

//******************************************************************************
//******************************************************************************
//******************************************************************************

namespace Ris
{

//******************************************************************************
//******************************************************************************
//******************************************************************************
// Sleep functions.

// Sleep milliseconds.
void sleepMs(int aTimeMs);

// Sleep microseconds.
void sleepUs(int aTimeUs);

//******************************************************************************
//******************************************************************************
//******************************************************************************
// This class provides a function that sleeps for a random time. 

class  RandomSleepMs
{
public:

   //***************************************************************************
   //***************************************************************************
   //***************************************************************************
   // Members.

   // Timer interval range, microseconds. These provide the bounds for a
   // uniform random number generator that generates a random sleep interval.
   // The inheritor timer handler function gets called after the random sleep.
   // The bounds are calculated as
   // [SleepMeanMs*1000*(1 - SleepRandom), SleepMeanMs*1000*(1 + SleepRandom)].
   int mSleepMeanMs;
   double mSleepRandom;

   //***************************************************************************
   //***************************************************************************
   //***************************************************************************
   // Members.

   // Timer interval range, microseconds. These provide the bounds for a
   // uniform random number generator that generates a random sleep interval.
   int mSleepUs1; // = SleepMeanMs * 1000 * (1 - SleepRandom)
   int mSleepUs2; // = SleepMeanMs * 1000 * (1 + SleepRandom)

   // Timer interval range, milliseconds. These provide the bounds for a
   // uniform random number generator that generates a random sleep interval.
   int mSleepMs1; // = SleepMeanMs * (1 - SleepRandom)
   int mSleepMs2; // = SleepMeanMs * (1 + SleepRandom)

   //***************************************************************************
   //***************************************************************************
   //***************************************************************************
   // Members.

   // Random numbers.
   std::mt19937 mRandomGenerator;
   std::uniform_int_distribution<> mRandomDistribution;

   //***************************************************************************
   //***************************************************************************
   //***************************************************************************
   // Methods.

   // Constructor.
   RandomSleepMs();
   RandomSleepMs(int aSleepMeanMs, double aSleepRandom);
   void initialize(int aSleepMeanMs, double aSleepRandom);
   void initialize(int aSleepRandomIntervalMs1, int aSleepRandomIntervalMs2);

   //***************************************************************************
   //***************************************************************************
   //***************************************************************************
   // Methods.

   // Sleep for a time that is generated by a random number that has 
   // bounds SleepUs1..SleepUs2.
   void doSleep();
};

//******************************************************************************
//******************************************************************************
//******************************************************************************
}//namespace


