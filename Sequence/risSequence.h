#pragma once

/*==============================================================================
State machine classes that generate sequences of ntuples of nonnegative
integers.
==============================================================================*/

//******************************************************************************
//******************************************************************************
//******************************************************************************

namespace Ris
{

//******************************************************************************
//******************************************************************************
//******************************************************************************
// This class implements a state machine that generates sequences of
// three tuples of nonnegative integers. It can be used in loops and
// other state machines.
// 

class ThreeSequence
{
public:

   //***************************************************************************
   //***************************************************************************
   //***************************************************************************
   // Members.

   // Modulus.
   int mi, mj, mk;

   // Sequence values. These are updated in the advance method.
   int i, j, k;

   // incremented each time advance is called.
   long long n;

   // Flags. These are updated in the advance method.
   bool firstflag;
   bool loopend;
   bool first_i, first_j, first_k;
   bool half_i, half_j, half_k;
   bool last_i, last_j, last_k;

   //***************************************************************************
   //***************************************************************************
   //***************************************************************************
   // Methods.

   ThreeSequence();
   ThreeSequence(int ami, int amj, int amk);
   void initialize(int ami, int amj, int amk);
   void restart();
   void advance();

   //***************************************************************************
   //***************************************************************************
   //***************************************************************************
   // Methods.

   void calc_flags();
};

//******************************************************************************
//******************************************************************************
//******************************************************************************
}//namespace