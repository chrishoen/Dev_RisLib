#pragma once

/*==============================================================================
Shared Memory class.
==============================================================================*/

//******************************************************************************
//******************************************************************************
//******************************************************************************

namespace Ris
{

//******************************************************************************
//******************************************************************************
//******************************************************************************
// This creates or opens a region of shared memory.

class SharedMemory
{
public:

   //***************************************************************************
   //***************************************************************************
   //***************************************************************************
   // Members.

   // The address of the shared memory region that was created or opened.
   void* mMemory;

   //***************************************************************************
   //***************************************************************************
   //***************************************************************************
   // Methods.

   // Constructor.
   SharedMemory();

   // Create the shared memory region, if it does not already exist. Open it
   // if it does already exist. Return true if the region was created, false
   // if it was opened.
   bool initialize(const char* aName, int aNumBytes);
   
   // Close the shared memory region.
   void finalize();

   //***************************************************************************
   //***************************************************************************
   //***************************************************************************
   // Specific implementation.

protected:
   class Specific;
   Specific* mSpecific;
};

//******************************************************************************
//******************************************************************************
//******************************************************************************
}//namespace


