/*==============================================================================
Description:
==============================================================================*/

//******************************************************************************
//******************************************************************************
//******************************************************************************
#include "stdafx.h"


#include "someShare.h"
#include "Experiment.h"

#define  _SOMETHREAD1_CPP_
#include "someThread1.h"

namespace Some
{

//******************************************************************************
//******************************************************************************
//******************************************************************************

Thread1::Thread1()
{
   // Set base class thread priority
   BaseClass::setThreadPriorityHigh();

   // Initialize member variables.
   mTPFlag = true;
}

//******************************************************************************
//******************************************************************************
//******************************************************************************

void Thread1::threadRunFunction()
{
   Prn::print(0, "Thread1::threadRunFunction BEGIN");
   while (!BaseClass::mTerminateFlag)
   {
      if (mTPFlag)
      {
         switch (gShare.mTest)
         {
         case 1:
            runTest1();
            break;
         case 2:
            runTest2();
            break;
         case 3:
            runTest3();
            break;
         default:
            threadSleep(200);
            break;
         }
      }
      else
      {
         BaseClass::threadSleep(100);
      }
   }
   Prn::print(0, "Thread1::threadRunFunction END");
}

//******************************************************************************
//******************************************************************************
//******************************************************************************

void Thread1::runTest1()
{
   if (mSem.get(2000))
   {
      Prn::print(0, "runTest1 GET*************************************");
   }
   else
   {
      Prn::print(0, "runTest1 TIMEOUT");
   }
}

//******************************************************************************
//******************************************************************************
//******************************************************************************

void Thread1::runTest2()
{
}

//******************************************************************************
//******************************************************************************
//******************************************************************************

void Thread1::runTest3()
{
}

}//namespace